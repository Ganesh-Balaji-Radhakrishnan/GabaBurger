{"ast":null,"code":"var _jsxFileName = \"/Users/ganeshbalajir/msmueller/TheBurgerWorld/GabaBurger/src/containers/BurgerBuilder/BurgerBuilder.jsx\";\nimport React, { Component } from \"react\";\nimport Burger from \"../../components/Burger/Burger\";\nimport BuildControls from \"../../components/Burger/BuildControls/BuildControls\";\nimport Modal from \"../../components/UI/Modal/Modal\";\nimport OrderSummary from \"../../components/Burger/OrderSummary/OrderSummary\";\nimport Loader from \"../../components/UI/Loader/Loader\";\nimport axios from \"../../axios-orders\";\nimport Aux from \"../../Hoc/aux/aux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INGREDIENT_PRICE = {\n  meat: 20,\n  bacon: 10,\n  cheese: 10,\n  salad: 5\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredient: {\n        meat: 0,\n        bacon: 0,\n        cheese: 0,\n        salad: 0\n      },\n      totalPrice: 20,\n      isCheckOutPossible: false,\n      isModalPopUp: false,\n      loading: false\n    };\n\n    this.toCheckout = ingredientsToCheck => {\n      const ingredients = ingredientsToCheck;\n      let sum = 0;\n\n      for (let key in ingredients) {\n        sum += ingredients[key];\n      }\n      /* if(sum > 0)\n      {this.setState({isCheckOutPossible: true })}\n      else{\n          this.setState({isCheckOutPossible: false })\n      } */\n\n\n      this.setState({\n        isCheckOutPossible: sum > 0\n      });\n    };\n\n    this.addIngredients = type => {\n      let oldIngredientCount = this.state.ingredient[type];\n      let newIngredientCount = oldIngredientCount + 1;\n      let updatedIngredients = { ...this.state.ingredient\n      };\n      updatedIngredients[type] = newIngredientCount;\n      let newPrice = INGREDIENT_PRICE[type];\n      let oldPrice = this.state.totalPrice;\n      let updatedPrice = newPrice + oldPrice;\n      this.setState({\n        ingredient: updatedIngredients,\n        totalPrice: updatedPrice\n      });\n      this.toCheckout(updatedIngredients); //console.log(this.state.ingredient)\n    };\n\n    this.removeIngredients = type => {\n      let oldIngredientCount = this.state.ingredient[type];\n\n      if (oldIngredientCount <= 0) {\n        return;\n      }\n\n      let newIngredientCount = oldIngredientCount - 1;\n      let updatedIngredients = { ...this.state.ingredient\n      };\n      updatedIngredients[type] = newIngredientCount;\n      let newPrice = INGREDIENT_PRICE[type];\n      let oldPrice = this.state.totalPrice;\n      let updatedPrice = oldPrice - newPrice;\n      this.setState({\n        ingredient: updatedIngredients,\n        totalPrice: updatedPrice\n      });\n      this.toCheckout(updatedIngredients); //console.log(this.state.ingredient)\n    };\n\n    this.modalPopUp = () => {\n      this.setState({\n        isModalPopUp: true\n      });\n    };\n\n    this.backdropCloser = () => {\n      this.setState({\n        isModalPopUp: false\n      });\n    };\n\n    this.orderSuccess = () => {\n      //alert('Your order is successful')\n      const order = {\n        ingredients: this.state.ingredient,\n        totalPrice: this.state.totalPrice,\n        customerName: \"Ganesh Balaji\",\n        address: {\n          city: \"stockholm\",\n          street: \"halsovÃ¤gen\"\n        },\n        deliveryMethod: \"faster\"\n      };\n      axios.post('/orders.json', order).then(res => this.setState({\n        loading: false,\n        isModalPopUp: false\n      })).catch(err => this.setState({\n        loading: false,\n        isModalPopUp: false\n      }));\n    };\n  }\n\n  render() {\n    const disabledOptions = { ...this.state.ingredient\n    };\n\n    for (let key in disabledOptions) {\n      if (disabledOptions[key] <= 0) {\n        disabledOptions[key] = true;\n      } else {\n        disabledOptions[key] = false;\n      }\n    } //console.log(disabledOptions)\n\n\n    let orderSummaryUpdate = /*#__PURE__*/_jsxDEV(OrderSummary, {\n      totalPrice: this.state.totalPrice,\n      ingredients: this.state.ingredient,\n      orderSuccess: this.orderSuccess,\n      orderCancel: this.backdropCloser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 34\n    }, this);\n\n    if (this.state.loading) {\n      orderSummaryUpdate = /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 34\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Aux, {\n      children: [/*#__PURE__*/_jsxDEV(Modal, {\n        popUpState: this.state.isModalPopUp,\n        backdropCloser: this.backdropCloser,\n        children: orderSummaryUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Burger, {\n        ingredients: this.state.ingredient\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BuildControls, {\n        addIngredients: this.addIngredients,\n        removeIngredients: this.removeIngredients,\n        disabledOptions: disabledOptions,\n        price: this.state.totalPrice,\n        isPurchaseable: this.state.isCheckOutPossible,\n        modalPopUp: this.modalPopUp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BurgerBuilder;","map":{"version":3,"sources":["/Users/ganeshbalajir/msmueller/TheBurgerWorld/GabaBurger/src/containers/BurgerBuilder/BurgerBuilder.jsx"],"names":["React","Component","Burger","BuildControls","Modal","OrderSummary","Loader","axios","Aux","INGREDIENT_PRICE","meat","bacon","cheese","salad","BurgerBuilder","state","ingredient","totalPrice","isCheckOutPossible","isModalPopUp","loading","toCheckout","ingredientsToCheck","ingredients","sum","key","setState","addIngredients","type","oldIngredientCount","newIngredientCount","updatedIngredients","newPrice","oldPrice","updatedPrice","removeIngredients","modalPopUp","backdropCloser","orderSuccess","order","customerName","address","city","street","deliveryMethod","post","then","res","catch","err","render","disabledOptions","orderSummaryUpdate"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\n\nimport Burger from \"../../components/Burger/Burger\"\nimport BuildControls from \"../../components/Burger/BuildControls/BuildControls\"\nimport Modal from \"../../components/UI/Modal/Modal\"\nimport OrderSummary from \"../../components/Burger/OrderSummary/OrderSummary\"\nimport Loader from \"../../components/UI/Loader/Loader\"\n\nimport axios from \"../../axios-orders\"\n\nimport Aux from \"../../Hoc/aux/aux\"\n\nconst INGREDIENT_PRICE = {\n    meat: 20,\n    bacon: 10,\n    cheese: 10,\n    salad: 5\n}\n\nclass BurgerBuilder extends Component{\n\n    state =  {\n        ingredient : {\n            meat: 0,\n            bacon: 0,\n            cheese: 0,\n            salad: 0,\n        },\n        totalPrice : 20,\n        isCheckOutPossible: false,\n        isModalPopUp: false,\n        loading: false\n    }\n\n    toCheckout = (ingredientsToCheck) => {\n        const ingredients = ingredientsToCheck\n        let sum = 0\n        for(let key in ingredients){\n            sum += ingredients[key]\n        }\n        /* if(sum > 0)\n        {this.setState({isCheckOutPossible: true })}\n        else{\n            this.setState({isCheckOutPossible: false })\n        } */\n        this.setState({isCheckOutPossible: sum > 0})\n    }\n\n    addIngredients = type => {\n \n        let oldIngredientCount = this.state.ingredient[type]\n        let newIngredientCount = oldIngredientCount + 1\n        let updatedIngredients = {...this.state.ingredient}\n        updatedIngredients[type] = newIngredientCount\n\n        let newPrice = INGREDIENT_PRICE[type]\n        let oldPrice = this.state.totalPrice\n        let updatedPrice = newPrice + oldPrice\n\n        this.setState({\n            ingredient : updatedIngredients,\n            totalPrice: updatedPrice\n        })\n\n        this.toCheckout(updatedIngredients)\n        //console.log(this.state.ingredient)\n    }\n\n    removeIngredients = type => {\n\n        let oldIngredientCount = this.state.ingredient[type]\n        if(oldIngredientCount <= 0){\n            return\n        }\n        let newIngredientCount = oldIngredientCount - 1\n        let updatedIngredients = {...this.state.ingredient}\n        updatedIngredients[type] = newIngredientCount\n\n        let newPrice = INGREDIENT_PRICE[type]\n        let oldPrice = this.state.totalPrice\n        let updatedPrice = oldPrice - newPrice\n\n        this.setState({\n            ingredient : updatedIngredients,\n            totalPrice: updatedPrice\n        })\n\n        this.toCheckout(updatedIngredients)\n        //console.log(this.state.ingredient)\n    }\n\n    modalPopUp = () => {\n        this.setState({isModalPopUp:true})\n    }\n\n    backdropCloser = () => {\n        this.setState({isModalPopUp:false})\n    }\n\n    orderSuccess = () => {\n        //alert('Your order is successful')\n        const order = {\n            ingredients : this.state.ingredient,\n            totalPrice: this.state.totalPrice,\n            customerName: \"Ganesh Balaji\",\n            address: {\n                city: \"stockholm\",\n                street: \"halsovÃ¤gen\"\n            },\n\n            deliveryMethod: \"faster\"\n        }\n\n        axios.post('/orders.json', order)\n            .then(res=>this.setState({loading:false, isModalPopUp: false}))\n            .catch(err=>this.setState({loading:false, isModalPopUp:false}))\n    }\n\n    render(){\n        const disabledOptions = {\n            ...this.state.ingredient \n        }\n\n        for(let key in disabledOptions){\n            if(disabledOptions[key]<=0){\n                disabledOptions[key]=true\n            } else {\n                disabledOptions[key] = false\n            }\n        }\n\n        //console.log(disabledOptions)\n\n        let orderSummaryUpdate = <OrderSummary totalPrice={this.state.totalPrice} ingredients={this.state.ingredient} orderSuccess={this.orderSuccess} orderCancel={this.backdropCloser}/>\n\n        if(this.state.loading){\n            orderSummaryUpdate = <Loader />\n        }\n\n        return(\n            <Aux>\n                <Modal popUpState={this.state.isModalPopUp} backdropCloser={this.backdropCloser}>\n                    {orderSummaryUpdate}\n                </Modal>\n                <Burger ingredients={this.state.ingredient}/>\n                <BuildControls \n                    addIngredients={this.addIngredients} \n                    removeIngredients={this.removeIngredients}\n                    disabledOptions={disabledOptions}\n                    price={this.state.totalPrice}\n                    isPurchaseable={this.state.isCheckOutPossible}\n                    modalPopUp={this.modalPopUp}\n                />\n            </Aux>\n        )\n    }\n}\n\nexport default BurgerBuilder"]},"metadata":{},"sourceType":"module"}